class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int arr[] = new int[k];
        List<List<Integer>> list = new ArrayList<>();
        /*if(k==9&&n==45) {
            List<Integer> lst = new ArrayList<>();
            lst.add(1);lst.add(2);lst.add(3);lst.add(4);lst.add(5);lst.add(6);
            lst.add(7);lst.add(8);lst.add(9);
            list.add(lst);
            return list;
        }*/
        dpp(1,arr,k,k-1,n,list);
        return list;
    }
    public void dpp(int i, int arr[], int l, int c, int n, List<List<Integer>> list) {
        if(c==-1&&n==0) {
            //System.out.println("Hello");
            List<Integer> lst = new ArrayList<>();
            for(int j = 0; j<l; j++) {
                lst.add(arr[j]);
            }
            list.add(lst);
            return;
        }
        if(c<-1||n<0||(n==0&&c!=-1)||(n!=0&&c==-1)||i>9) {  //c<-1||n<0||
            //System.out.println("Hello");
            return;
        }
        arr[c] = i;
        dpp(i+1,arr,l,c-1,n-i,list);
        dpp(i+1,arr,l,c,n,list);
    }
}