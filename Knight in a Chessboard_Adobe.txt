class Solution {
    public double knightProbability(int n, int k, int row, int column) {
        double arr[][][] = new double[n][n][k+1]; 
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<n; j++) {
                for(int l = 0; l<=k; l++) {
                    arr[i][j][l] = -1.0; 
                }
            }
        }
        // for(int i = 0; i<n; i++) {
        //     for(int j = 0; j<n; j++) {
        //         for(int l = 0; l<=k; l++) {
        //             System.out.println(arr[i][j][l]); 
        //         }
        //     }
        // }
        return dp(arr,row,column,k,n); 
    }
    public double dp(double arr[][][], int i, int j, int k, int n) {
        //System.out.println(k+" +++___+++ "+i+" "+j); 
        if(i<0||j<0||i>=n||j>=n) {
            //System.out.println(n); 
            return 0.0; 
        }
        if(k==0) {
            //System.out.println(n); 
            return 1.0; 
        }
        //System.out.println(k+" +++___+++ "+i+" "+j); 
        if(arr[i][j][k]!=-1.0) {
            //System.out.println(arr[i][j][k]); 
            return arr[i][j][k];    
        }
        double a = 0; 
        //System.out.println(k+" +++___+++ "+i+" "+j); 
        a+=(dp(arr,i-2,j-1,k-1,n)/(double)8.0); 
        a+=(dp(arr,i-2,j+1,k-1,n)/(double)8.0); 
        a+=(dp(arr,i+2,j-1,k-1,n)/(double)8.0); 
        a+=(dp(arr,i+2,j+1,k-1,n)/(double)8.0); 
        a+=(dp(arr,i-1,j-2,k-1,n)/(double)8.0); 
        a+=(dp(arr,i+1,j-2,k-1,n)/(double)8.0); 
        a+=(dp(arr,i-1,j+2,k-1,n)/(double)8.0); 
        a+=(dp(arr,i+1,j+2,k-1,n)/(double)8.0); 
        arr[i][j][k] = a; 
        return arr[i][j][k];       
    }
}