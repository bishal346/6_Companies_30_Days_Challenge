class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        int arr[][] = new int[n][n]; 
        int brr[][] = new int[n][k+1];
        for(int i = 0; i<flights.length; i++) {
            arr[flights[i][0]][flights[i][1]] = flights[i][2]; 
        }
        for(int i = 0; i<n; i++)
            //for(int j = 0; j<n; j++)
            for(int l = 0; l<=k; l++)
                brr[i][l] = -1; 
        
        int a = dp(src,0,arr,brr,k,dst,n);
        //return dp(src, 0,arr,brr,k,dst,n);
        return a<=0||a>=9999999?-1:a;
    }
    public int dp(int i, int c, int arr[][], int brr[][], int k, int dst, int n) {
        if(i==dst)
            return 0; 
        if(c>k) {
            return Integer.MAX_VALUE;
        }
        if(brr[i][c]!=-1) {
            return brr[i][c];
        }
        int min = Integer.MAX_VALUE; 
        int a = 0; 
        for(int j = 0; j<n; j++) {
            if(arr[i][j]!=0) {
                a = Math.min(min,arr[i][j]+dp(j,c+1,arr,brr,k,dst,n));
                if(a>0) {
                min = Math.min(min,a);
                }
            }
        }
        brr[i][c] = min;
        return brr[i][c];  
    }
    
}