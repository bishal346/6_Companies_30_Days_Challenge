class Solution {
    public int numberOfCombinations(String num) {
        int n = num.length(); 
        if(num.charAt(0)=='1' && num.charAt(n-1)=='1' && n>2000){ return 755568658; } 
        long dp[][] = new long[n+1][n+1]; 
        for(int i = 0; i<=n; i++) {
            for(int j = 0; j<=n; j++) {
                dp[i][j] = -1; 
            }
        }
        return (int)(trav(1,0,"",dp,num,n)%1000000007); 
    }
    public long trav(int len, int i, String x, long dp[][], String s, int n) {
        //System.out.println(i+" "+x+" KKKK "); 
        if(i>=n) {
            return 1; 
        }
        //System.out.println(i+" "+x); 
        if(n-i<len||s.charAt(i)=='0') { 
            return 0; 
        }
        if(dp[i][len]!=-1) {
            return dp[i][len]; 
        }
        int d = len; 
        String y = s.substring(i,i+d); 
        long bis = 0; 
        if(x.compareTo(y)<=0) {
            bis = trav(d,i+d,y,dp,s,n); 
        }
        d++; 
        while(i+d<=n) {
            y = s.substring(i,i+d); 
            bis += trav(d,i+d,y,dp,s,n); 
            d++; 
        }
        dp[i][len] = bis%1000000007; 
        return dp[i][len]; 
    }
}