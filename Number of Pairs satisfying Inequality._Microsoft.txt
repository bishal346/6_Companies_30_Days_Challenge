class Solution {
    long c = 0; 
    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {
        int n = nums1.length; 
        for(int i = 0; i<n; i++) {
            nums1[i]-=nums2[i];  
            //System.out.print(nums1[i]+" "); 
        }
        //System.out.println(); 
        int arr[] = mergesort(0,n-1,nums1,diff); 
        return c; 
    }
    public int[] mergesort(int i, int j, int arr[], int diff) {
        if(i==j) {
            int brr[] = new int[1]; 
            brr[0] = arr[i]; 
            return brr; 
        }
        //System.out.println(i+" "+j); 
        int mid = (i+j)/2; 
        int crr[] = mergesort(i,mid,arr,diff); 
        int drr[] = mergesort(mid+1,j,arr,diff); 
        int i1 = 0, j1 = 0; 
        int c1 = 0; 
        int brr[] = new int[(j-i)+1]; 
        //int x = crr.length, y = drr.length; 
        while(i1<(mid-i)+1&&j1<j-mid) {
            if(drr[j1]+diff>=crr[i1]) { 
                //System.out.println((j-mid)+"    "+j1); 
                c+=(((j-mid)-j1)); 
                i1++; 
            }
            else {
                j1++; 
            }
        }
        //System.out.println(); 
        i1 = 0; j1 = 0; 
        while(i1<(mid-i)+1&&j1<j-mid) {
            if(drr[j1]>=crr[i1]) {
                //c+=((j-j1)+1); 
                brr[c1] = crr[i1]; 
                i1++; 
            }
            else {
                brr[c1] = drr[j1]; 
                j1++; 
            }
            c1++; 
        }
        while(i1<(mid-i)+1) {
            brr[c1] = crr[i1]; 
            i1++; 
            c1++; 
        }
        while(j1<j-mid) {
            brr[c1] = drr[j1]; 
            j1++; 
            c1++; 
        } 
        // for(int a : brr) {
        //     System.out.print(a+" "); 
        // }
        //System.out.println(); 
        return brr; 
    }
}