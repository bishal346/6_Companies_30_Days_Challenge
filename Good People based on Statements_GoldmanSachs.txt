class Solution {
    public int maximumGood(int[][] arr) {
        int n = arr.length; 
        int brr[] = new int[n]; 
        int comb = (int)Math.pow(2,n); 
        int a = 0; 
        int max = 0; 
        for(int i = 1; i<=comb; i++) {
            a = arrange(i,brr,n); 
            if(a<=max) {
                continue; 
            }
            else {
                if(judge(arr,brr,n)) {
                    max = a; 
                }
            }
        }
        return max; 
    }
    public int arrange(int a, int brr[], int n) { 
        int c = 0; 
        //System.out.print(a+" -> ["); 
        for(int i = n-1; i>=0; i--) {
            if(a%2==1) {
                brr[i] = 1; 
                c++; 
            }
            else {
                brr[i] = 0; 
            }
            //System.out.print(brr[i]+" "); 
            a/=2; 
        }
        //System.out.println("] "); 
        return c; 
    }
    public boolean judge(int arr[][], int brr[], int n) { 
        for(int i = 0; i<n; i++) {
            if(brr[i]==0) {
                continue; 
            }
            for(int j = 0; j<n; j++) {
                // if(i==j||brr[j]==0||arr[i][j]==2) {
                //     continue; 
                // }
                if(arr[i][j]!=2&&brr[j]!=arr[i][j]) {
                    return false; 
                }
            }
        }
        // for(int d : brr) 
        //     System.out.print(d+" "); 
        // System.out.println(); 
        return true; 
    }
}